Folder PATH listing for volume Windows 10
Volume serial number is 84B5-3BBC
C:.
³   Dockerfile
³   End-to-End-meetings-auotomater.txt
³   LICENSE
³   README.md
³   requirements.txt
³   utils.py
³   __init__.py
³   
.github
³   workflows
³           deploy.yml
³           
Ãapp
³   ³   main.py
³   ³   
³   api
³   ³       action_items_routes.py
³   ³       summarizer_routes.py
³   ³       transciber_routes.py
³   ³       __init__.py
³   ³       
³   services
³           action_items_extractor.py
³           summarizer.py
³           transcriber.py
³           __init__.py
³           
logs
³   ³   logger.py
³   ³   logs.log
³   ³   
³           
ui

code:









C:.
³   Dockerfile
code:

# Base image
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install system packages
RUN apt-get update && apt-get install -y \
    gcc \
    build-essential \
    ffmpeg \
    libsndfile1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy dependencies
COPY requirements.txt .

# Install Python packages
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Copy project files
COPY . .

# Expose FastAPI port
EXPOSE 8000

# Start the FastAPI app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

³   LICENSE
³   README.md
³   requirements.txt
³   utils.py
code:
import re
from deepmultilingualpunctuation import PunctuationModel
from spellchecker import SpellChecker
import language_tool_python
import nltk
nltk.download('punkt')
from nltk.tokenize import sent_tokenize

spell = SpellChecker()
tool = language_tool_python.LanguageTool('en-US')

punc_model = PunctuationModel()


def remove_filler_words(self, text):

    filler_words = ["um", "uh", "you know", "like", "I mean", "so", "well", "hmm", "er", "ah", "right", "okay", "actually", "basically", "kind of", "sort of", "literally", "totally", "just", "really", "yeah", "y'know", "yep", "mhm", "anyway", "see", "look", "listen", "I guess", "I think", "I suppose", "you see", "at the end of the day", "for sure", "in fact", "in general", "more or less", "that said", "to be honest", "to tell you the truth", "I'm telling you", "believe me", "seriously", "frankly", "honestly", "now", "then", "here", "there", "what's more", "furthermore", "moreover", "as a matter of fact", "by the way", "you know what I mean?", "am I right?", "does that make sense?", "got it?", "understand?", "you follow?", "anyways", "anywho", "indeed", "surely", "certainly", "absolutely", "without a doubt", "of course", "no doubt", "for example", "for instance", "in other words", "that is", "namely", "specifically", "in particular", "above all", "after all", "by all means", "in any case", "in short", "to sum up", "all in all", "as I was saying", "as you can see", "as it were", "if you will", "you could say", "one might say", "it's like", "it's as if", "it's just that", "it's worth noting", "it's important to remember", "let me see", "let me think", "hold on", "hang on", "wait a minute", "give me a second", "bear with me", "if I may", "if you don't mind", "if you will allow me", "if I remember correctly", "if I'm not mistaken"]

    pattern = r'\b(' + '|'.join(filler_words) + r')\b'
    text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    text = re.sub(r'\s+', ' ', text).strip()

    return text


def remove_repeated_words(self, text):
    text = re.sub(r'\b(\w+)( \1\b)+', r'\1', text)
    return text


def restore_punctuation(self, text):
    return punc_model.restore_punctuation(text)


def fix_text(text):

    text = " ".join([spell.correction(word) if spell.unknown([word]) else word for word in text.split()])

    matches = tool.check(text)
    for match in matches:
        if match.replacements:
            text = text.replace(match.text, match.replacements[0])

    return text


def remove_small_talk(text):
    """Removes common meeting greetings, chit-chat, filler words, and redundant phrases."""
    small_talk_patterns = [
        r"\b(hello|hi|hey|good morning|good afternoon|good evening|greetings|hiya|howdy|salutations|yo)\b",
        r"\b(how are you|hope you're doing well|how's it going|how are things|how's everyone doing|nice to see you|thanks for joining|thanks for attending|thanks for coming|pleased to meet you|good to see you all|how's your day|how's your week)\b",
        r"\b(yeah|okay|alright|sure|let's start|let's begin|let's get started|sounds good|that's fine|no problem|absolutely|definitely|exactly|great|perfect|wonderful|awesome|fantastic|right|indeed|certainly|surely|affirmative|roger|copy that|agreed|understood|gotcha)\b",
        r"\b(so|well|um|uh|like|you know|I mean|basically|actually|literally|kind of|sort of|just|really|totally|anyhow|anyway|anyways|by the way|er|ah|hmm|y'know|yep|mhm|anywho|see|look|listen|now|then|here|there|yep|mhm|uh-huh|uh huh|mm-hmm|mm hmm|like so)\b",
        r"\b(it's good to be here|I'm happy to be here|I'm glad to be here|it's a pleasure to be here|I'm excited to be here|glad we're all here|happy to join|pleased to be present)\b",
        r"\b(can everyone hear me|can you all hear me|is everyone able to hear me|can you hear me okay|can you hear me all right|is my microphone working|can you see my screen|is my audio clear|test test|testing 1 2 3|mic check|audio check)\b",
        r"\b(sorry I'm late|apologies for being late|I apologize for the delay|excuse my tardiness|sorry for the wait|my apologies|my bad)\b",
        r"\b(thanks for the update|that's great to hear|that's good to know|thanks for sharing|I appreciate the update|thanks for the info|good stuff|thank you for that|appreciate that)\b",
        r"\b(any questions|any thoughts|any comments|anything else to add|does anyone have anything else to say|any feedback|any concerns|any queries|any input)\b",
        r"\b(that's all for today|thanks everyone for attending|thanks for your time|have a great day|have a good one|see you next time|bye everyone|take care|goodbye|farewell|until next time)\b",
        r"\b(I guess|I think|I suppose|you see|at the end of the day|for sure|in fact|in general|more or less|that said|to be honest|to tell you the truth|I'm telling you|believe me|seriously|frankly|honestly|what's more|furthermore|moreover|as a matter of fact|you know what I mean\?|am I right\?|does that make sense\?|got it\?|understand\?|you follow\?|to be fair|in my opinion|personally|from my perspective|if you ask me)\b",
        r"\b(as I was saying|as you can see|as it were|if you will|you could say|one might say|it's like|it's as if|it's just that|it's worth noting|it's important to remember|let me see|let me think|hold on|hang on|wait a minute|give me a second|bear with me|if I may|if you don't mind|if you will allow me|if I remember correctly|if I'm not mistaken|just to clarify|to reiterate|to summarize|to recap|just to add)\b",
        r"\b(literally|totally|just|really|kind of|sort of|basically|actually|you know|I mean|simply|merely)\b", #redundant but helps with frequency
        r"\b(well|so|um|uh|like|right|okay|now then|then again)\b", #redundant but helps with frequency
        r"\b(at the end of the day|for sure|in fact|in general|more or less|that said|to be honest|to tell you the truth|I'm telling you|believe me|seriously|frankly|honestly|to be perfectly honest)\b", #redundant but helps with frequency
        r"\b(anyways|anywho|indeed|surely|certainly|absolutely|without a doubt|of course|no doubt|for example|for instance|in other words|that is|namely|specifically|in particular|above all|after all|by all means|in any case|in short|to sum up|all in all|in summary|in conclusion)\b", #redundant but helps with frequency
        r"\b(i mean to say|it goes without saying|it is what it is|that being said|with that being said|needless to say|to put it simply|to put it another way|to that end|to that effect|as such|in that regard)\b",
        r"\b(correct|exactly right|precisely|spot on|you're right|you're correct|that's correct|you are correct)\b",
        r"\b(right then|alright then|very well|very good|excellent|splendid|fantastic)\b",
        r"\b(for what it's worth|if I may add|if you don't mind me saying|as far as I'm concerned|in my humble opinion)\b",
        r"\b(as you know|as we all know|as mentioned earlier)\b",
        r"\b(moving forward|going forward|in the future|from now on)\b",
        r"\b(with respect to|regarding|concerning|pertaining to)\b",
        r"\b(as previously discussed|as we discussed earlier)\b"
    ]
    for pattern in small_talk_patterns:
        text = re.sub(pattern, "", text, flags=re.IGNORECASE)
    text = re.sub(r"\s+", " ", text).strip()  
    return text


def segment_sentences(text):
    sentences = sent_tokenize(text)
    return " ".join(sentences)


def chunk_text(text, max_length=1024):
    words = text.split()  
    chunks = []
    
    for i in range(0, len(words), max_length):
        chunk = " ".join(words[i:i+max_length])
        chunks.append(chunk)
    
    return chunks
    

def preprocess_transcripts(Text):

    text = remove_small_talk(text)
    text = remove_filler_words(text)
    text = remove_repeated_words(text)
    text = fix_text(text)
    text = restore_punctuation(text)
    text = segment_sentences(text)
    chunks = chunk_text(text)

    return chunks
        

³   __init__.py
³   
.github
³   workflows
³           deploy.yml
code:
name: Deploy to Render

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Trigger Render Deploy Hook
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
           
app
³   ³   main.py
code:
from fastapi import FastAPI
from pydantic import BaseModel
import os, sys

from logs.logger import log_event
from app.services.transcriber import transcribe_audio
from app.services.summarizer import summarize_text
from app.services.action_items_extractor import extract_action_items

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


app = FastAPI()

@app.post("/extract")
def extract(file):
    try:
        log_event("Stage 1", "Audio transribtion started!")
        text = transcribe_audio(file)
    except Exception as e:
        log_event("Error", f"Audio transcribion failed {e}")
        raise e

    try:
        log_event("Stage 2", "Transcription summarization started!")
        summary = summarize_text(text)

    except Exception as e:
        log_event("Error", f"Transcription summarization failed {e}")
        raise e

    try:
        log_event("Stage 3", "Action items extraction started!")
        action_items = extract_action_items(summary)
    except Exception as e:
        log_event("Error", f"Action items extraction failed {e}")
        raise e
        

    return {"summary": summary, "action_items": action_items}







³   ³   
³   api
³   ³       action_items_routes.py
code:
import requests
import os

API_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.1"
API_TOKEN = os.getenv("HF_API_TOKEN")

headers = {
    "Authorization": f"Bearer {API_TOKEN}"
}

def llm_api(text: str):
    prompt = (
        "Extract the key action items from the meeting summary below. "
        "Respond ONLY with a JSON list where each action item has a 'task' and optionally an 'owner' and 'due_date'.\n\n"
        f"Meeting Summary:\n{text}\n\n"
        "Example Output:\n"
        "[{\"task\": \"Send client the updated roadmap\", \"owner\": \"Alex\", \"due_date\": \"next Monday\"},"
        "{\"task\": \"Schedule Q2 strategy meeting\"}]\n\n"
        "Now extract the action items:"
    )

    payload = {"inputs": prompt}

    response = requests.post(API_URL, headers=headers, json=payload)

    if response.status_code != 200:
        raise Exception(f"Hugging Face API Error: {response.status_code} {response.text}")

    return response.json()[0]["generated_text"].strip()

³   ³       summarizer_routes.py
code:
import requests
import os

API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
API_TOKEN = os.getenv("HF_API_TOKEN")

headers = {
    "Authorization": f"Bearer {API_TOKEN}"
}

def summarization_api(text: str):
    payload = {
        "inputs": text,
        "parameters": {
            "min_length": 30,
            "max_length": 200,
            "do_sample": False
        }
    }

    response = requests.post(API_URL, headers=headers, json=payload)

    if response.status_code != 200:
        raise Exception(f"Hugging Face Summarizer Error: {response.status_code} {response.text}")

    return response.json()[0]["summary_text"]


³   ³       transciber_routes.py
code:
import os
from google.cloud import speech
from tempfile import NamedTemporaryFile

def transcriber_api(file):
    client = speech.SpeechClient()

    with NamedTemporaryFile(delete=False, suffix=".wav") as temp_audio:
        temp_audio.write(file.read())
        temp_audio.flush()

        with open(temp_audio.name, "rb") as audio_file:
            content = audio_file.read()

    audio = speech.RecognitionAudio(content=content)
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
        language_code="en-US"
    )

    response = client.recognize(config=config, audio=audio)

    full_text = " ".join([result.alternatives[0].transcript for result in response.results])
    return full_text

³   ³       __init__.py
³   ³       
³   services
³           action_items_extractor.py
code:
import os, sys

from app.api.action_items_routes import llm_api
from logs.logger import log_event

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def extract_action_items(text):

    try:
        text = llm_api(text)
    except Exception as e:
        log_event("Error", f"Connection to action items extractor API failed: {e}")


    return text
³           summarizer.py
code:
import os, sys

from app.api.summarizer_routes import summarization_api
from logs.logger import log_event

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def summarize_text(text):

    try:
       text = summarization_api(text)
    except Exception as e:
        log_event("Error", f"Connection to summarizer API failed: {e}")


    return text

³           transcriber.py
code:
from app.api.transciber_routes import transcriber_api
from utils import preprocess_transcription
import os, sys

from logs.logger import log_event

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


def transcribe_audio(file):

    try:
        text = transcriber_api(file)
    except Exception as e:
        log_event("Error", f"Connection to trancribier API failed: {e}")

    try:
        chunks = preprocess_transcription(text)
    except Exception as e:
        log_event("Error", f"preprocessing transcription failed: {e}")
        

    return chunks

³           __init__.py
³           
logs
³   ³   logger.py
³   ³   logs.log
³   ³   
³           
ui
code:
import streamlit as st
import requests
import time

API_BASE = "https://your-api-url.onrender.com"  

st.set_page_config(page_title="Meeting Automator", layout="centered")
st.title("?? Meeting Automation Assistant")
st.caption("Upload an audio file to transcribe, summarize, and extract action items.")

# Step 1: Upload
audio_file = st.file_uploader("Upload your meeting audio", type=["mp3", "wav"])

if audio_file and st.button("Transcribe + Analyze"):
    with st.spinner("Uploading and transcribing..."):
        # Transcribe
        transcribe_response = requests.post(
            f"{API_BASE}/transcribe",
            files={"file": audio_file}
        )

        if transcribe_response.status_code == 200:
            transcription = transcribe_response.json().get("transcription")
            st.subheader("?? Transcription")
            st.text_area("Full Transcript", transcription, height=200)

            # Summarize
            with st.spinner("Summarizing..."):
                summary_response = requests.post(
                    f"{API_BASE}/summarize",
                    json={"text": transcription}
                )

            if summary_response.status_code == 200:
                summary = summary_response.json().get("summary")
                st.subheader("?? Summary")
                st.text_area("Meeting Summary", summary, height=150)
            else:
                st.error("Failed to summarize.")

            # Action Items
            with st.spinner("Extracting action items..."):
                action_response = requests.post(
                    f"{API_BASE}/action-items",
                    json={"text": transcription}
                )

            if action_response.status_code == 200:
                action_items = action_response.json().get("action_items")
                st.subheader("? Action Items")
                for i, item in enumerate(action_items, 1):
                    st.markdown(f"**{i}.** `{item.get('task')}`")
                    if item.get("owner"):
                        st.write(f"- Owner: {item['owner']}")
                    if item.get("due_date"):
                        st.write(f"- Due: {item['due_date']}")
            else:
                st.error("Failed to extract action items.")

        else:
            st.error("Failed to transcribe. Please check your file format.")

